From e81b6fdf5b7d99c57ed58c624c8e255221d0a0f8 Mon Sep 17 00:00:00 2001
From: Julien Desfossez <jdesfossez@efficios.com>
Date: Thu, 20 Nov 2014 16:05:01 -0500
Subject: [MODULES PATCH] connect to latency_tracker tracepoints

Signed-off-by: Julien Desfossez <jdesfossez@efficios.com>
---
 .../events/lttng-module/latency_tracker.h          | 50 +++++++++++++++++++++
 instrumentation/events/mainline/latency_tracker.h  | 52 ++++++++++++++++++++++
 probes/Makefile                                    |  2 +
 probes/lttng-probe-latency_tracker.c               | 22 +++++++++
 4 files changed, 126 insertions(+)
 create mode 100644 instrumentation/events/lttng-module/latency_tracker.h
 create mode 100644 instrumentation/events/mainline/latency_tracker.h
 create mode 100644 probes/lttng-probe-latency_tracker.c

diff --git a/instrumentation/events/lttng-module/latency_tracker.h b/instrumentation/events/lttng-module/latency_tracker.h
new file mode 100644
index 0000000..e3c1a2a
--- /dev/null
+++ b/instrumentation/events/lttng-module/latency_tracker.h
@@ -0,0 +1,50 @@
+#undef TRACE_SYSTEM
+#define TRACE_SYSTEM latency_tracker
+
+#if !defined(LTTNG_TRACE_LATENCY_TRACKER_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_LATENCY_TRACKER_H
+#include "../../../probes/lttng-tracepoint-event.h"
+#include <linux/tracepoint.h>
+
+LTTNG_TRACEPOINT_EVENT(
+	sched_latency,
+	TP_PROTO(pid_t pid, u64 delay, unsigned int timeout),
+	TP_ARGS(pid, delay, timeout),
+	TP_STRUCT__entry(
+		__field(int, pid)
+		__field(u64, delay)
+		__field(unsigned int, timeout)
+	),
+	TP_fast_assign(
+		tp_assign(pid, pid)
+		tp_assign(delay, delay)
+		tp_assign(timeout, timeout)
+	),
+	TP_printk("pid=%d, delay=%llu, timeout=%u", __entry->pid,
+		__entry->delay, __entry->timeout)
+   )
+
+LTTNG_TRACEPOINT_EVENT(
+	block_latency,
+	TP_PROTO(dev_t dev, sector_t sector, u64 delay),
+	TP_ARGS(dev, sector, delay),
+	TP_STRUCT__entry(
+		__field(u32, major)
+		__field(u32, minor)
+		__field(u64, sector)
+		__field(u64, delay)
+	),
+	TP_fast_assign(
+		tp_assign(major, MAJOR(dev))
+		tp_assign(minor, MINOR(dev))
+		tp_assign(sector, sector)
+		tp_assign(delay, delay)
+	),
+	TP_printk("dev=(%u,%u), sector=%llu, delay=%llu",
+		__entry->major, __entry->minor, __entry->sector,
+		__entry->delay)
+   )
+#endif /* LTTNG_TRACE_LATENCY_TRACKER_H */
+
+/* this part must be outside protection */
+#include "../../../probes/define_trace.h"
diff --git a/instrumentation/events/mainline/latency_tracker.h b/instrumentation/events/mainline/latency_tracker.h
new file mode 100644
index 0000000..2d80142
--- /dev/null
+++ b/instrumentation/events/mainline/latency_tracker.h
@@ -0,0 +1,52 @@
+/* subsystem name is "latency_tracker" */
+#undef TRACE_SYSTEM
+#define TRACE_SYSTEM latency_tracker
+
+#if !defined(_TRACE_LATENCY_TRACKER_H) || defined(TRACE_HEADER_MULTI_READ)
+#define _TRACE_LATENCY_TRACKER_H
+
+#include <linux/tracepoint.h>
+
+TRACE_EVENT(
+	sched_latency,
+	TP_PROTO(pid_t pid, u64 delay, unsigned int timeout),
+	TP_ARGS(pid, delay, timeout),
+	TP_STRUCT__entry(
+		__field(int, pid)
+		__field(u64, delay)
+		__field(unsigned int, timeout)
+	),
+	TP_fast_assign(
+		entry->pid = pid;
+		entry->delay = delay;
+		entry->timeout = timeout;
+	),
+	TP_printk("pid=%d, delay=%llu, timeout=%u", __entry->pid,
+		__entry->delay, __entry->timeout)
+   );
+
+TRACE_EVENT(
+	block_latency,
+	TP_PROTO(dev_t dev, sector_t sector, u64 delay),
+	TP_ARGS(dev, sector, delay),
+	TP_STRUCT__entry(
+		__field(u32, major)
+		__field(u32, minor)
+		__field(u64, sector)
+		__field(u64, delay)
+	),
+	TP_fast_assign(
+		entry->major = MAJOR(dev);
+		entry->minor = MINOR(dev);
+		entry->sector = sector;
+		entry->delay = delay;
+	),
+	TP_printk("dev=(%u,%u), sector=%llu, delay=%llu",
+		__entry->major, __entry->minor, __entry->sector,
+		__entry->delay)
+   );
+
+#endif /* _TRACE_LATENCY_TRACKER_H */
+
+/* this part must be outside protection */
+#include <trace/define_trace.h>
diff --git a/probes/Makefile b/probes/Makefile
index 662cfdb..19d091b 100644
--- a/probes/Makefile
+++ b/probes/Makefile
@@ -18,6 +18,8 @@ obj-m += lttng-probe-power.o
 obj-m += lttng-probe-statedump.o
 obj-m += lttng-probe-latency.o
 
+obj-m += lttng-probe-latency_tracker.o
+
 ifneq ($(CONFIG_KVM),)
 obj-m += lttng-probe-kvm.o
 ifneq ($(CONFIG_X86),)
diff --git a/probes/lttng-probe-latency_tracker.c b/probes/lttng-probe-latency_tracker.c
new file mode 100644
index 0000000..582ea93
--- /dev/null
+++ b/probes/lttng-probe-latency_tracker.c
@@ -0,0 +1,22 @@
+#include <linux/module.h>
+#include "../lttng-tracer.h"
+
+/* Build time verification of mismatch between mainline TRACE_EVENT()
+ * arguments and LTTng adaptation layer LTTNG_TRACEPOINT_EVENT() arguments.
+ */
+#include "../instrumentation/events/mainline/latency_tracker.h"
+
+/* create LTTng tracepoint probes */
+#define LTTNG_PACKAGE_BUILD
+#define CREATE_TRACE_POINTS
+#define TRACE_INCLUDE_PATH ../instrumentation/events/lttng-module
+
+#include "../instrumentation/events/lttng-module/latency_tracker.h"
+
+MODULE_LICENSE("GPL and additional rights");
+MODULE_AUTHOR("Julien Desfossez <jdesfossez@efficios.com>");
+MODULE_DESCRIPTION("LTTng latency_tracker probes");
+MODULE_VERSION(__stringify(LTTNG_MODULES_MAJOR_VERSION) "."
+    __stringify(LTTNG_MODULES_MINOR_VERSION) "."
+    __stringify(LTTNG_MODULES_PATCHLEVEL_VERSION)
+    LTTNG_MODULES_EXTRAVERSION);
-- 
1.9.1

