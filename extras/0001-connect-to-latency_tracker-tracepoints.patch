From 6b41a67be1afbd73abe691f86cfa61d7477b8c8d Mon Sep 17 00:00:00 2001
From: Julien Desfossez <jdesfossez@efficios.com>
Date: Tue, 10 Mar 2015 10:30:21 -0400
Subject: [MODULES PATCH] connect to latency_tracker tracepoints

Signed-off-by: Francois Doray <francois.pierre-doray@polymtl.ca>
Signed-off-by: Julien Desfossez <jdesfossez@efficios.com>
---
 .../events/lttng-module/latency_tracker.h          | 148 +++++++++++++++++++++
 instrumentation/events/mainline/latency_tracker.h  | 148 +++++++++++++++++++++
 probes/Makefile                                    |   2 +
 probes/lttng-probe-latency_tracker.c               |  22 +++
 4 files changed, 320 insertions(+)
 create mode 100644 instrumentation/events/lttng-module/latency_tracker.h
 create mode 100644 instrumentation/events/mainline/latency_tracker.h
 create mode 100644 probes/lttng-probe-latency_tracker.c

diff --git a/instrumentation/events/lttng-module/latency_tracker.h b/instrumentation/events/lttng-module/latency_tracker.h
new file mode 100644
index 0000000..b4b6b74
--- /dev/null
+++ b/instrumentation/events/lttng-module/latency_tracker.h
@@ -0,0 +1,148 @@
+#undef TRACE_SYSTEM
+#define TRACE_SYSTEM latency_tracker
+
+#if !defined(LTTNG_TRACE_LATENCY_TRACKER_H) || defined(TRACE_HEADER_MULTI_READ)
+#define LTTNG_TRACE_LATENCY_TRACKER_H
+#include "../../../probes/lttng-tracepoint-event.h"
+#include <linux/tracepoint.h>
+#include <linux/netdevice.h>
+
+LTTNG_TRACEPOINT_EVENT(
+	wakeup_latency,
+	TP_PROTO(char comm[TASK_COMM_LEN], pid_t pid, u64 delay, unsigned int flag),
+	TP_ARGS(comm, pid, delay, flag),
+	TP_STRUCT__entry(
+		__array_text(char, comm, TASK_COMM_LEN)
+		__field(int, pid)
+		__field(u64, delay)
+		__field(unsigned int, flag)
+	),
+	TP_fast_assign(
+		tp_memcpy(comm, comm, TASK_COMM_LEN)
+		tp_assign(pid, pid)
+		tp_assign(delay, delay)
+		tp_assign(flag, flag)
+	),
+	TP_printk("comm=%s, pid=%d, delay=%llu, flag=%u", __entry->comm,
+		__entry->pid, __entry->delay, __entry->flag)
+   )
+
+LTTNG_TRACEPOINT_EVENT(
+	offcpu_latency,
+	TP_PROTO(char comm[TASK_COMM_LEN], pid_t pid, u64 delay,
+		unsigned int flag, char stack[256]),
+	TP_ARGS(comm, pid, delay, flag, stack),
+	TP_STRUCT__entry(
+		__array_text(char, comm, TASK_COMM_LEN)
+		__field(int, pid)
+		__field(u64, delay)
+		__field(unsigned int, flag)
+		__array_text(char, stack, 256)
+	),
+	TP_fast_assign(
+		tp_memcpy(comm, comm, TASK_COMM_LEN)
+		tp_assign(pid, pid)
+		tp_assign(delay, delay)
+		tp_assign(flag, flag)
+		tp_memcpy(stack, stack, 256)
+	),
+	TP_printk("comm=%s, pid=%d, delay=%llu, flag=%u, stack=%s",
+		__entry->comm, __entry->pid, __entry->delay, __entry->flag,
+		__entry->stack)
+   )
+
+LTTNG_TRACEPOINT_EVENT(
+	syscall_latency,
+	TP_PROTO(char syscall[KSYM_SYMBOL_LEN], char comm[TASK_COMM_LEN],
+		pid_t pid, u64 delay),
+	TP_ARGS(syscall, comm, pid, delay),
+	TP_STRUCT__entry(
+		__array_text(char, syscall, KSYM_SYMBOL_LEN)
+		__array_text(char, comm, TASK_COMM_LEN)
+		__field(int, pid)
+		__field(u64, delay)
+	),
+	TP_fast_assign(
+		tp_memcpy(syscall, syscall, KSYM_SYMBOL_LEN)
+		tp_memcpy(comm, comm, TASK_COMM_LEN)
+		tp_assign(pid, pid)
+		tp_assign(delay, delay)
+	),
+	TP_printk("syscall=%s, comm=%s, pid=%d, delay=%llu",
+		__entry->syscall, __entry->comm, __entry->pid,
+		__entry->delay)
+   )
+
+LTTNG_TRACEPOINT_EVENT(
+	syscall_latency_stack,
+	TP_PROTO(char syscall[KSYM_SYMBOL_LEN], char comm[TASK_COMM_LEN],
+		pid_t pid, u64 delay,
+		unsigned int flag, char stack[256]),
+	TP_ARGS(syscall, comm, pid, delay, flag, stack),
+	TP_STRUCT__entry(
+		__array_text(char, syscall, KSYM_SYMBOL_LEN)
+		__array_text(char, comm, TASK_COMM_LEN)
+		__field(int, pid)
+		__field(u64, delay)
+		__field(unsigned int, flag)
+		__array_text(char, stack, 256)
+	),
+	TP_fast_assign(
+		tp_memcpy(syscall, syscall, KSYM_SYMBOL_LEN)
+		tp_memcpy(comm, comm, TASK_COMM_LEN)
+		tp_assign(pid, pid)
+		tp_assign(delay, delay)
+		tp_assign(flag, flag)
+		tp_memcpy(stack, stack, 256)
+	),
+	TP_printk("syscall=%s, comm=%s, pid=%d, delay=%llu, flag=%u, stack=%s",
+		__entry->syscall, __entry->comm, __entry->pid, __entry->delay,
+		__entry->flag, __entry->stack)
+   )
+
+LTTNG_TRACEPOINT_EVENT(
+	block_latency,
+	TP_PROTO(dev_t dev, sector_t sector, u64 delay),
+	TP_ARGS(dev, sector, delay),
+	TP_STRUCT__entry(
+		__field(u32, major)
+		__field(u32, minor)
+		__field(u64, sector)
+		__field(u64, delay)
+	),
+	TP_fast_assign(
+		tp_assign(major, MAJOR(dev))
+		tp_assign(minor, MINOR(dev))
+		tp_assign(sector, sector)
+		tp_assign(delay, delay)
+	),
+	TP_printk("dev=(%u,%u), sector=%llu, delay=%llu",
+		__entry->major, __entry->minor, __entry->sector,
+		__entry->delay)
+   )
+
+LTTNG_TRACEPOINT_EVENT(
+	net_latency,
+	TP_PROTO(struct net_device *dev, u64 delay,
+		unsigned int flag, unsigned int out_id),
+	TP_ARGS(dev, delay, flag, out_id),
+	TP_STRUCT__entry(
+		__array_text(char, name, 32)
+		__field(u64, delay)
+		__field(unsigned int, flag)
+		__field(unsigned int, out_id)
+	),
+	TP_fast_assign(
+		tp_memcpy(name, dev->name, 32)
+		tp_assign(delay, delay)
+		tp_assign(flag, flag)
+		tp_assign(out_id, out_id)
+	),
+	TP_printk("iface=%s, delay=%llu, flag=%u, out_id=%u",
+		__array(name), __entry->delay, __entry->flag,
+		__entry->out_id)
+   )
+#endif /* LTTNG_TRACE_LATENCY_TRACKER_H */
+
+/* this part must be outside protection */
+#include "../../../probes/define_trace.h"
diff --git a/instrumentation/events/mainline/latency_tracker.h b/instrumentation/events/mainline/latency_tracker.h
new file mode 100644
index 0000000..7783a87
--- /dev/null
+++ b/instrumentation/events/mainline/latency_tracker.h
@@ -0,0 +1,148 @@
+/* subsystem name is "latency_tracker" */
+#undef TRACE_SYSTEM
+#define TRACE_SYSTEM latency_tracker
+
+#if !defined(_TRACE_LATENCY_TRACKER_H) || defined(TRACE_HEADER_MULTI_READ)
+#define _TRACE_LATENCY_TRACKER_H
+
+#include <linux/tracepoint.h>
+#include <linux/netdevice.h>
+
+TRACE_EVENT(
+	wakeup_latency,
+	TP_PROTO(char comm[TASK_COMM_LEN], pid_t pid, u64 delay, unsigned int flag),
+	TP_ARGS(comm, pid, delay, flag),
+	TP_STRUCT__entry(
+		__array(char, comm, TASK_COMM_LEN)
+		__field(int, pid)
+		__field(u64, delay)
+		__field(unsigned int, flag)
+	),
+	TP_fast_assign(
+		memcpy(__entry->comm, comm, TASK_COMM_LEN);
+		entry->pid = pid;
+		entry->delay = delay;
+		entry->flag = flag;
+	),
+	TP_printk("comm=%s, pid=%d, delay=%llu, flag=%u", __entry->comm,
+		__entry->pid, __entry->delay, __entry->flag)
+   );
+
+TRACE_EVENT(
+	offcpu_latency,
+	TP_PROTO(char comm[TASK_COMM_LEN], pid_t pid, u64 delay,
+		unsigned int flag, char stack[256]),
+	TP_ARGS(comm, pid, delay, flag, stack),
+	TP_STRUCT__entry(
+		 __array(char, comm, TASK_COMM_LEN)
+		__field(int, pid)
+		__field(u64, delay)
+		__field(unsigned int, flag)
+		__array(char, stack, 256)
+		),
+	TP_fast_assign(
+		memcpy(__entry->comm, comm, TASK_COMM_LEN);
+		entry->pid = pid;
+		entry->delay = delay;
+		entry->flag = flag;
+		memcpy(__entry->stack, stack, 256);
+		),
+	TP_printk("comm=%s, pid=%d, delay=%llu, flag=%u, stack=%s",
+		__entry->comm, __entry->pid, __entry->delay, __entry->flag,
+		__entry->stack)
+   );
+
+TRACE_EVENT(
+	syscall_latency_stack,
+	TP_PROTO(char syscall[KSYM_SYMBOL_LEN], char comm[TASK_COMM_LEN],
+		pid_t pid, u64 delay, unsigned int flag, char stack[256]),
+	TP_ARGS(syscall, comm, pid, delay, flag, stack),
+	TP_STRUCT__entry(
+		__array(char, syscall, KSYM_SYMBOL_LEN)
+		__array(char, comm, TASK_COMM_LEN)
+		__field(int, pid)
+		__field(u64, delay)
+		__field(unsigned int, flag)
+		__array(char, stack, 256)
+		),
+	TP_fast_assign(
+		memcpy(__entry->syscall, syscall, KSYM_SYMBOL_LEN);
+		memcpy(__entry->comm, comm, TASK_COMM_LEN);
+		entry->pid = pid;
+		entry->delay = delay;
+		entry->flag = flag;
+		memcpy(__entry->stack, stack, 256);
+		),
+	TP_printk("syscall=%s, comm=%s, pid=%d, delay=%llu flag=%u, stack=%s",
+		__entry->syscall, __entry->comm, __entry->pid, __entry->delay,
+		__entry->flag, __entry->stack)
+   );
+
+TRACE_EVENT(
+	syscall_latency,
+	TP_PROTO(char syscall[KSYM_SYMBOL_LEN], char comm[TASK_COMM_LEN],
+		pid_t pid, u64 delay),
+	TP_ARGS(syscall, comm, pid, delay),
+	TP_STRUCT__entry(
+		__array(char, syscall, KSYM_SYMBOL_LEN)
+		__array(char, comm, TASK_COMM_LEN)
+		__field(int, pid)
+		__field(u64, delay)
+		),
+	TP_fast_assign(
+		memcpy(__entry->syscall, syscall, KSYM_SYMBOL_LEN);
+		memcpy(__entry->comm, comm, TASK_COMM_LEN);
+		entry->pid = pid;
+		entry->delay = delay;
+		),
+	TP_printk("syscall=%s, comm=%s, pid=%d, delay=%llu", __entry->syscall,
+		__entry->comm, __entry->pid, __entry->delay)
+   );
+
+TRACE_EVENT(
+	block_latency,
+	TP_PROTO(dev_t dev, sector_t sector, u64 delay),
+	TP_ARGS(dev, sector, delay),
+	TP_STRUCT__entry(
+		__field(u32, major)
+		__field(u32, minor)
+		__field(u64, sector)
+		__field(u64, delay)
+	),
+	TP_fast_assign(
+		entry->major = MAJOR(dev);
+		entry->minor = MINOR(dev);
+		entry->sector = sector;
+		entry->delay = delay;
+	),
+	TP_printk("dev=(%u,%u), sector=%llu, delay=%llu",
+		__entry->major, __entry->minor, __entry->sector,
+		__entry->delay)
+   );
+
+TRACE_EVENT(
+	net_latency,
+	TP_PROTO(struct net_device *dev, u64 delay,
+		unsigned int flag, unsigned int out_id),
+	TP_ARGS(dev, delay, flag, out_id),
+	TP_STRUCT__entry(
+		__string(name, dev->name)
+		__field(u64, delay)
+		__field(unsigned int, flag)
+		__field(unsigned int, out_id)
+	),
+	TP_fast_assign(
+		__assign_str(name, dev->name);
+		entry->delay = delay;
+		entry->flag = flag;
+		entry->out_id = out_id;
+	),
+	TP_printk("iface=%s, delay=%llu, flag=%u, out_id=%u",
+		__get_str(name), __entry->delay, __entry->flag,
+		__entry->out_id)
+   );
+
+#endif /* _TRACE_LATENCY_TRACKER_H */
+
+/* this part must be outside protection */
+#include <trace/define_trace.h>
diff --git a/probes/Makefile b/probes/Makefile
index 8e4ceb7..acd5297 100644
--- a/probes/Makefile
+++ b/probes/Makefile
@@ -17,6 +17,8 @@ obj-m += lttng-probe-power.o
 
 obj-m += lttng-probe-statedump.o
 
+obj-m += lttng-probe-latency_tracker.o
+
 ifneq ($(CONFIG_KVM),)
 obj-m += lttng-probe-kvm.o
 ifneq ($(CONFIG_X86),)
diff --git a/probes/lttng-probe-latency_tracker.c b/probes/lttng-probe-latency_tracker.c
new file mode 100644
index 0000000..582ea93
--- /dev/null
+++ b/probes/lttng-probe-latency_tracker.c
@@ -0,0 +1,22 @@
+#include <linux/module.h>
+#include "../lttng-tracer.h"
+
+/* Build time verification of mismatch between mainline TRACE_EVENT()
+ * arguments and LTTng adaptation layer LTTNG_TRACEPOINT_EVENT() arguments.
+ */
+#include "../instrumentation/events/mainline/latency_tracker.h"
+
+/* create LTTng tracepoint probes */
+#define LTTNG_PACKAGE_BUILD
+#define CREATE_TRACE_POINTS
+#define TRACE_INCLUDE_PATH ../instrumentation/events/lttng-module
+
+#include "../instrumentation/events/lttng-module/latency_tracker.h"
+
+MODULE_LICENSE("GPL and additional rights");
+MODULE_AUTHOR("Julien Desfossez <jdesfossez@efficios.com>");
+MODULE_DESCRIPTION("LTTng latency_tracker probes");
+MODULE_VERSION(__stringify(LTTNG_MODULES_MAJOR_VERSION) "."
+    __stringify(LTTNG_MODULES_MINOR_VERSION) "."
+    __stringify(LTTNG_MODULES_PATCHLEVEL_VERSION)
+    LTTNG_MODULES_EXTRAVERSION);
-- 
1.9.1

